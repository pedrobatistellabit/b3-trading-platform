name: Docker Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job to build all services in parallel
  build-services:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile
            image_name: backend
          - service: frontend
            context: ./frontend  
            dockerfile: ./frontend/Dockerfile
            image_name: frontend
          - service: market-data
            context: ./services/market-data
            dockerfile: ./services/market-data/Dockerfile
            image_name: market-data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      # Uncomment when ready to push to registry
      # - name: Log in to Container Registry
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for ${{ matrix.service }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=B3 Trading Platform ${{ matrix.service }}
            org.opencontainers.image.description=B3 Trading Platform ${{ matrix.service }} service
            org.opencontainers.image.vendor=pedrobatistellabit

      - name: Build and test ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: false  # Change to true when ready to push
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          outputs: type=docker,dest=/tmp/${{ matrix.service }}-image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp/${{ matrix.service }}-image.tar
          retention-days: 1

  # Optional: Integration test job that uses the built images
  integration-test:
    if: github.event_name == 'pull_request'
    needs: build-services
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all image artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp/images

      - name: Load Docker images
        run: |
          docker load -i /tmp/images/backend-image/backend-image.tar
          docker load -i /tmp/images/frontend-image/frontend-image.tar  
          docker load -i /tmp/images/market-data-image/market-data-image.tar

      - name: Verify images were loaded
        run: |
          echo "Loaded Docker images:"
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

      # Uncomment to run actual integration tests
      # - name: Run integration tests
      #   run: |
      #     # Start services using docker-compose with built images
      #     # Run your integration test suite here
      #     echo "Integration tests would run here"

  # Summary job for required checks
  docker-build-summary:
    if: always()
    needs: [build-services]
    runs-on: ubuntu-latest
    steps:
      - name: Check build results
        run: |
          if [[ "${{ needs.build-services.result }}" == "success" ]]; then
            echo "✅ All Docker images built successfully"
          else
            echo "❌ Docker image builds failed"
            exit 1
          fi